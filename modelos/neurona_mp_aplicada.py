# -*- coding: utf-8 -*-
"""Neurona MP Aplicada

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SNmYoqgouO1oAXnrZOA4lTEYuYKAKysl
"""

import numpy as np

class MPNeuron:

  def __init__(self, threshold):
    self.threshold = threshold

  def model(self, X): # [1,1,0,0]
    return sum(X) >= self.threshold

  def predict(self, X): #  [ [1,1,0,0], [1,1,0,0], [1,1,0,0] ]

    y = []
    for x in X:
      y.append(self.model(x))

    return np.array(y)


  def fit(self, X, y): # X_train, y_train
    accuracy = {}

    for t in range(X.shape[1] + 1):
      self.threshold = t
      y_pred = self.predict(X)
      # print(accuracy_score(y_pred, y))
      accuracy[t] = accuracy_score(y_pred, y)

    self.threshold = max(accuracy, key=accuracy.get) # el que mayor % de acierto obtenga, seria el threshold "ideal"

mp = MPNeuron(threshold=1)

X = np.array([[1,1,0,0], [1,0,0,0], [1,1,0,1]])

pred = mp.predict(X)
pred

from sklearn.metrics import accuracy_score
from sklearn.datasets import load_breast_cancer


data_cancer = load_breast_cancer()

X = data_cancer.data # Caracteristicas de entrada
y = data_cancer.target # Etiquetas de Salida

print(data_cancer.feature_names)

import pandas as pd

df = pd.DataFrame(X, columns=data_cancer.feature_names)
df

# Separar el conjunto de datos para hacer entrenamiento y pruebas
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(df, y, test_size=0.30 )#stratify=y

#transformaci√≥n de datos a binario (para las caracteristicas de entrada)
X_train_bin = X_train.apply(pd.cut, bins=2, labels=[1,0])

X_test_bin = X_test.apply(pd.cut, bins=2, labels=[1,0])

X_train_bin

mpNeuron = MPNeuron(2)

mpNeuron.fit(X_train_bin.values, y_train)

mpNeuron.threshold

#hacer las predicciones
predicts = mpNeuron.predict(X_test_bin.values)
predicts

accuracy_score(y_test,predicts )

from sklearn.metrics import confusion_matrix

confusion_matrix(y_test,predicts )